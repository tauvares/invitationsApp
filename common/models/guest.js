'use strict';
module.exports = function(Guest) {
  Guest.sendEmail = function(req, cb) {
    // using SendGrid's v3 Node.js Library
    // https://github.com/sendgrid/sendgrid-nodejs
/*-----------------Actual Code------------------
    var helper = require('sendgrid').mail;
    var stringTemplate =
      '<style>a[class="bulletproof-button"] {' +
      '  display: block !important;' +
      '  width: auto !important;' +
      '  font-size: 80%;' +
      '  padding-left: 0 !important;' +
      '  padding-right: 0 !important;' +
      '}</style>' +
      '<table align="center"><tr><td  align="center">' +
      '<img align="center" src="https://invitationsapp.herokuapp.com/api/containers/images/download/' + req.eventphoto + '"></td></tr>' +
      '</table>' +
      '<HR>' +
      '<H2 align="center">' + req.eventname + '</H2>' +
      '<p align="center">Caro parceiro da instituição - ' + req.guestname + ', </p>' +
      '<p align="center">' + req.eventdescription + '</p>' +
      '<p align="center">Atenciosamente,</p>' +
      '<H4 align="center">' + req.hostname + '</H4>' +
      '<H4 align="center">' + req.hostaddress + '</H4>' +
      '<H4 align="center">' + req.hostphone + '</H4>' +
      '<HR>' +
      '<table align="center"><tr><td align="center" style="-webkit-border-radius: 8px; -moz-border-radius: 8px; border-radius: 8px; font-size: 16px;" bgcolor="#FF6666">' +
      '<a align="center" href="' + req.confirmationlink + '" class="bulletproof-button" target="_blank" style="height: px; width: 250px; font-size: 16px; line-height: px; font-family: Helvetica, Arial, sans-serif; color: #ffffff; padding: 12px 12px 12px 12px; text-decoration: none; color: #ffffff; text-decoration: none; -webkit-border-radius: 8px; -moz-border-radius: 8px; border-radius: 8px; border: 1px solid #FF6666; display: inline-block;">CONFIRMAR</a>' +
      '</td></tr></table>' +
      '<table align="center">' +
      '<tr><td align="center"><H4 align="center">This e-mail was generated by </H4></td></tr>' +
      '<tr><td  align="center">' +
      '<img align="center" src="https://invitationsapp.herokuapp.com/api/containers/images/download/invitationsAppLogoMicro.png"></td></tr>' +
      '</table>';
    var from_email = new helper.Email(req.hostemail);
    var to_email = new helper.Email(req.guestemail);
    var subject = req.eventname;
    var content = new helper.Content("text/html", stringTemplate);
    var mail = new helper.Mail(from_email, subject, to_email, content);
-------------------------------END Actual code-------------------------*/
//--------------------New email code, including cc, bcc and attachments
    var helper = require('sendgrid').mail

    mail = new helper.Mail()

    email = new helper.Email("joaos@mpdft.mp.br", "Example João")
    mail.setFrom(email)

    mail.setSubject("EVENTO 08/07 da cema")

    personalization = new helper.Personalization()
    email = new helper.Email("tauvares@gmail.com", "tauvares campo para")
    personalization.addTo(email)
    email = new helper.Email("joaos@mpdft.mp.br", "joao mp campo para")
    personalization.addTo(email)
    email = new helper.Email("tauvares@gmail.com", "tauvares CC")
    personalization.addCc(email)
    email = new helper.Email("joaos@mpdft.mp.br", "joao mp CC")
    personalization.addCc(email)
    email = new helper.Email("tauvares@gmail.com", "tauvares BCC")
    personalization.addBcc(email)
    email = new helper.Email("joaos@mpdft.mp.br", "joaos BCC")
    personalization.addBcc(email)

  /*
    personalization.setSubject("Hello World from the Personalized SendGrid Node.js Library")
    header = new helper.Header("X-Test", "True")
    personalization.addHeader(header)
    header = new helper.Header("X-Test2", "False")
    personalization.addHeader(header)
    substitution = new helper.Substitution("%name%", "Example User")
    personalization.addSubstitution(substitution)
    substitution = new helper.Substitution("%city%", "Denver")
    personalization.addSubstitution(substitution)
    custom_arg = new helper.CustomArgs("timing", "morning")
    personalization.addCustomArg(custom_arg)
    custom_arg = new helper.CustomArgs("type", "marketing")
    personalization.addCustomArg(custom_arg)
    personalization.setSendAt(1443636899)
    mail.addPersonalization(personalization)
*/
    mail.addPersonalization(personalization)
//COnteúdo
    content = new helper.Content("text/plain", "some text here")
    mail.addContent(content)
    content = new helper.Content("text/html", "<html><body>some text here</body></html>")
    mail.addContent(content)
    content = new helper.Content("text/calendar", "Party Time")
    mail.addContent(content)
/*/
//ANEXOS
    attachment = new helper.Attachment()
    attachment.setContent("TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3JhcyBwdW12")
    attachment.setType("application/pdf")
    attachment.setFilename("balance_001.pdf")
    attachment.setDisposition("attachment")
    mail.addAttachment(attachment)

    attachment = new helper.Attachment()
    attachment.setContent("BwdW")
    attachment.setType("image/png")
    attachment.setFilename("banner.png")
    attachment.setDisposition("inline")
    attachment.setContentId("banner")
    mail.addAttachment(attachment)
*/

/*APAGAR
    mail.setTemplateId("439b6d66-4408-4ead-83de-5c83c2ee313a")

    section = new helper.Section("%section1%", "Textforasubstitutiontagofsection1")
    mail.addSection(section)
    section = new helper.Section("%section2%", "Textforasubstitutiontagofsection2")
    mail.addSection(section)

    header = new helper.Header("X-Test3", "1")
    mail.addHeader(header)
    header = new helper.Header("X-Test4", "2")
    mail.addHeader(header)

    category = new helper.Category("January")
    mail.addCategory(category)
    category = new helper.Category("2015")
    mail.addCategory(category)

    custom_arg = new helper.CustomArgs("timing", "evening")
    mail.addCustomArg(custom_arg)
    custom_arg = new helper.CustomArgs("type", "summer_contest")
    mail.addCustomArg(custom_arg)

    mail.setSendAt(1443636899)

    //This must be a valid [batch ID](https://sendgrid.com/docs/API_Reference/SMTP_API/scheduling_parameters.html) to work
    //mail.setBatchId("some_batch_id")

    asm = new helper.Asm(3, [1,4,5])
    mail.setAsm(asm)

    mail.setIpPoolName("23")

    mail_settings = new helper.MailSettings()
    bcc = new helper.Bcc(true, "test@example.com")
    mail_settings.setBcc(bcc)
    footer = new helper.Footer(true, "some footer text", "<html><body>some footer text</body></html>")
    mail_settings.setFooter(footer)
    sandbox_mode = new helper.SandBoxMode(true)
    mail_settings.setSandBoxMode(sandbox_mode)
    spam_check = new helper.SpamCheck(true, 1, "https://gotchya.example.com")
    mail_settings.setSpamCheck(spam_check)
    mail.addMailSettings(mail_settings)

    tracking_settings = new helper.TrackingSettings()
    click_tracking = new helper.ClickTracking(false, false)
    tracking_settings.setClickTracking(click_tracking)
    open_tracking = new helper.OpenTracking(true, "Optional tag to replace with the open image in the body of the message")
    tracking_settings.setOpenTracking(open_tracking)
    subscription_tracking = new helper.SubscriptionTracking(true, "text to insert into the text/plain portion of the message", "html to insert into the text/html portion of the message", "Optional tag to replace with the open image in the body of the message")
    tracking_settings.setSubscriptionTracking(subscription_tracking)
    ganalytics = new helper.Ganalytics(true, "some utm source", "some utc medium", "some utm term", "some utm content", "some utm campaign")
    tracking_settings.setGanalytics(ganalytics)
    mail.addTrackingSettings(tracking_settings)

    email = new helper.Email("test@example.com", "Example User")
    mail.setReplyTo(email)
*/
    //return mail.toJSON()
//--------------------END New email code, including cc, bcc and attachments

    var sendgridKey = SENDGRID_API_KEY;
    var sg = require('sendgrid')(sendgridKey);
    var request = sg.emptyRequest({
      method: 'POST',
      path: '/v3/mail/send',
      body: mail.toJSON()
    });
    sg.API(request, function(error, response) {
      console.log(response.statusCode);
      console.log(response.body);
      console.log(response.headers);
    })
  };
  Guest.remoteMethod(
    'sendEmail', {
      accepts: {
        arg: 'req',
        type: 'object',
        'http': {
          source: 'body'
        }
      },
      returns: {
        arg: 'status',
        type: 'string'
      }
    }
  );

  Guest.confirmation = function(id, cb) {
      cb(null, id);
  };
  Guest.remoteMethod('confirmation', {
    http: {
      path: '/:id/confirmation',
      verb: 'get'
    },
    accepts: {
      arg: 'id',
      type: 'string',
      required: true
    },
    returns: {
      arg: 'confirmation',
      type: 'string',
      'http': {
        source: 'body'
      }
    }
  });

  Guest.barcode = function(id, cb) {
    cb(null, id);
  };
  Guest.remoteMethod('barcode', {
    http: {
      path: '/:id/barcode',
      verb: 'get'
    },
    accepts: {
      arg: 'id',
      type: 'string',
      required: true
    },
    returns: {
      arg: 'barcode',
      type: 'string'
    }
  });

};
